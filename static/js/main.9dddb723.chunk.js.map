{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","title","poster","genres","synopsis","className","MoviePoster","alt","map","index","MovieGenre","text","maxLine","ellipsis","trimRight","basedOn","src","prototype","PropTypes","string","isRequired","array","App","state","_renderMovies","movies","movie","console","log","medium_cover_image","id","_getMoives","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUA2BA,SAASA,EAAT,GAAoD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SACnC,OACI,sBAAKC,UAAU,QAAf,UAEI,qBAAKA,UAAU,cAAf,SACI,cAACC,EAAD,CAAaJ,OAAQA,EAAQK,IAAMN,MAGvC,sBAAKI,UAAU,cAAf,UAEI,6BACKJ,IAGL,qBAAKI,UAAU,gBAAf,SACKF,EAAOK,KAAI,SAACL,EAAQM,GAAT,OAAmB,cAACC,EAAD,CAAYP,OAAQA,GAAaM,QAGpE,mBAAGJ,UAAU,cAAb,SACI,cAAC,IAAD,CACIM,KAAMP,EACNQ,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,oBA0BhC,SAAST,EAAT,GAAuC,IAAhBJ,EAAe,EAAfA,OAAQK,EAAO,EAAPA,IAC3B,OACI,qBAAKS,IAAKd,EAAQK,IAAKA,EAAKN,MAAQM,EAAMF,UAAU,kBAI5D,SAASK,EAAT,GAAgC,IAAVP,EAAS,EAATA,OAElB,OACI,sBAAME,UAAU,eAAhB,SACKF,IAKbH,EAAMiB,UAAY,CACdhB,MAAOiB,IAAUC,OAAOC,WACxBlB,OAAQgB,IAAUC,OAAOC,WACzBjB,OAAQe,IAAUG,MAAMD,WACxBhB,SAAUc,IAAUC,OAAOC,YAI/Bd,EAAYW,UAAY,CACpBf,OAAQgB,IAAUC,OAAOC,WACzBb,IAAKW,IAAUC,OAAOC,YAG1BV,EAAWO,UAAY,CACnBd,OAAQe,IAAUC,OAAOC,YAGdpB,QCrBAsB,E,4MA5EbC,MAAQ,G,EA6BRC,cAAgB,WAed,OAdQ,EAAKD,MAAME,OAAOjB,KAAI,SAACkB,GAM7B,OAFAC,QAAQC,IAAIF,GAEL,cAAC,EAAD,CACLzB,MAAOyB,EAAMzB,MACbC,OAAQwB,EAAMG,mBAEd1B,OAAQuB,EAAMvB,OACdC,SAAUsB,EAAMtB,UAFXsB,EAAMI,Q,EAQhBC,W,sBAAa,iBAAAC,EAAA,SAAAA,EAAA,sEACG,EAAKC,WADR,OACPD,EADO,OAIX,EAAKE,SAAS,CACZT,OAASO,IALA,2C,EASdC,SAAW,WACT,OAAOE,MAAM,yDACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKd,UACvBe,OAAM,SAAAC,GAAG,OAAId,QAAQC,IAAIa,O,uDA1D9B,WAEEd,QAAQC,IAAI,aAEZc,KAAKX,e,oBA0DP,WAAU,IAEFN,EAAWiB,KAAKnB,MAAhBE,OAEN,OACE,qBAAKpB,UAAWoB,EAAS,MAAQ,eAAjC,SACGA,EAASiB,KAAKlB,gBAAkB,mB,GA9EvBmB,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAE1BZ,M","file":"static/js/main.9dddb723.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\n// npm install --save react-lines-ellipsis\r\nimport LinesEllpsis from 'react-lines-ellipsis';\r\n\r\n// class Movie extends Component {\r\n\r\n//     static props = {\r\n//         title: PropTypes.string,\r\n//         poster: PropTypes.string\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <MoviePoster poster={ this.props.poster} />\r\n//             <h1>\r\n//                 { this.props.title}\r\n//             </h1>\r\n//             </div>\r\n//         );\r\n        \r\n//     }\r\n// }\r\n\r\n\r\nfunction Movie({title, poster, genres, synopsis }) {\r\n    return (\r\n        <div className='Movie'>\r\n\r\n            <div className='Movie__Colm'>\r\n                <MoviePoster poster={poster} alt={ title }/>\r\n            </div>\r\n\r\n            <div className='Movie__Colm'>\r\n\r\n                <h1>\r\n                    {title}\r\n                </h1>\r\n\r\n                <div className='Movie__Genres'>\r\n                    {genres.map((genres, index) => <MovieGenre genres={genres} key={index}/>)}\r\n                </div>\r\n\r\n                <p className='Movie__Syno'>\r\n                    <LinesEllpsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// class MoviePoster extends Component {\r\n\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <img src={ this.props.poster } alt='Movie Poster' />\r\n//         );\r\n//     }\r\n// }\r\n\r\n// \r\n// return 만 한다.\r\n// render 과정이 없음\r\nfunction MoviePoster({ poster, alt }) {\r\n    return (\r\n        <img src={poster} alt={alt} title={ alt } className='Movie__Poster' />\r\n    );\r\n}\r\n\r\nfunction MovieGenre({ genres}) {\r\n            \r\n    return (\r\n        <span className='Movie__Genre'>\r\n            {genres}\r\n        </span>\r\n    );\r\n}\r\n\r\nMovie.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nMoviePoster.prototype = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.prototype = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  // Render 순서 : componentWillMount() >> render() >> componetDidMount()\n\n  // componentWillMount() {\n  //   console.log('will.mount');\n  // }\n\n  state = {}\n  \n  componentDidMount() {\n\n    console.log('did.mount');\n    \n    this._getMoives();\n\n    // 원래 fetch가 끝나기 전에는 밑에 잇는 구문이 실행되지 않음\n    // 그래서 사용되는게 Promise\n    // Promise는 asynchronous.\n    \n    /*\n    fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n      .then(response => response.json())\n      .then(json => console.log(json))\n      .catch(err => console.log(err));\n    */\n    // 이거는 console에서 나왔던거\n    // console.log(response)\n    // ok: true  >>>> request가 성공적이었따는 뜻\n    // redirected: false \n    // status: 200  >>>> OK\n    // statusText: \"\"\n    // type: \"cors\"\n  }\n  \n  // = () =>\n  // 이거는 \n  _renderMovies = () => {\n    var m = this.state.movies.map((movie) => {\n      // key값 정하기\n      // map의 기능 중 하나인 index를 사용해서 key값을 정하는 것\n      // movieInfo에 고유 id값을 정하는 것\n      console.log(movie);\n\n      return <Movie\n        title={movie.title}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />;\n    });\n    return m;\n  }\n  \n   _getMoives = async () => {\n     var a = await this._callApi();\n    // callApi 실행후 밑의 코드가 실행됨\n     \n     this.setState({\n       movies : a\n     });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=rating')\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n    \n  }\n\n  render() {\n    \n    var { movies } = this.state;\n\n    return (\n      <div className={movies ? 'App' : 'App--loading'}>\n        {movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}